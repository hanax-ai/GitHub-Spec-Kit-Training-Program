name: Documentation Update & Maintenance

on:
  push:
    branches: [ main ]
    paths:
      - '**.md'
      - 'curriculum/**'
      - 'exercises/**'
      - 'teaching_materials/**'
  pull_request:
    branches: [ main ]
    paths:
      - '**.md'
  schedule:
    - cron: '0 2 * * 0'  # Weekly maintenance on Sundays
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.HX_SPEC_KIT_SECRET }}
  HX_TOKEN_VAR: ${{ vars.HX_SPEC_KIT_VAR }}

jobs:
  update-documentation:
    runs-on: ubuntu-latest
    name: Update Documentation
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.HX_SPEC_KIT_SECRET }}
        fetch-depth: 0
    
    - name: Setup Git Configuration
      run: |
        git config --global user.name "hanax-ai"
        git config --global user.email "jarvisr@hana-x.ai"
    
    - name: Validate Markdown Files
      run: |
        echo "📝 Validating markdown files..."
        
        # Find all markdown files
        find . -name "*.md" -not -path "./.git/*" > markdown_files.txt
        
        echo "Found $(wc -l < markdown_files.txt) markdown files:"
        cat markdown_files.txt
        
        # Basic validation
        invalid_files=0
        while IFS= read -r file; do
          if [ -f "$file" ]; then
            # Check if file is not empty
            if [ -s "$file" ]; then
              echo "✅ $file - Valid"
            else
              echo "⚠️ $file - Empty file"
              invalid_files=$((invalid_files + 1))
            fi
          else
            echo "❌ $file - File not found"
            invalid_files=$((invalid_files + 1))
          fi
        done < markdown_files.txt
        
        if [ $invalid_files -gt 0 ]; then
          echo "⚠️ Found $invalid_files invalid markdown files"
        else
          echo "✅ All markdown files are valid"
        fi
    
    - name: Generate Table of Contents
      run: |
        echo "📚 Generating table of contents..."
        
        # Create comprehensive TOC
        echo "# GitHub Spec Kit Training Program - Table of Contents" > TOC.md
        echo "" >> TOC.md
        echo "## 📋 Quick Navigation" >> TOC.md
        echo "" >> TOC.md
        echo "### 🚀 Getting Started" >> TOC.md
        echo "- [README](README.md) - Program overview and introduction" >> TOC.md
        echo "- [Quick Start Guide](QUICK_START.md) - Immediate execution guide" >> TOC.md
        echo "- [Environment Validation](validate_environment.sh) - Setup verification script" >> TOC.md
        echo "" >> TOC.md
        
        echo "### 📚 Curriculum (5-Day Progressive Path)" >> TOC.md
        for day in {1..5}; do
          case $day in
            1) title="Foundation" ;;
            2) title="Intermediate" ;;
            3) title="Advanced" ;;
            4) title="Complex Projects" ;;
            5) title="Mastery" ;;
          esac
          
          md_file="curriculum/day${day}_$(echo $title | tr '[:upper:]' '[:lower:]' | tr ' ' '_').md"
          if [ -f "$md_file" ]; then
            echo "- [Day $day: $title]($md_file)" >> TOC.md
          fi
        done
        echo "" >> TOC.md
        
        echo "### 💪 Practical Components" >> TOC.md
        echo "- [Progressive Exercises](exercises/progressive_exercises.md)" >> TOC.md
        echo "- [Validation Checkpoints](exercises/validation_checkpoints.md)" >> TOC.md
        echo "" >> TOC.md
        
        echo "### 🛠️ Setup & Configuration" >> TOC.md
        if [ -f "environment_setup/devops_server_setup.md" ]; then
          echo "- [DevOps Server Setup](environment_setup/devops_server_setup.md)" >> TOC.md
        fi
        if [ -f "environment_setup/windows11_setup.md" ]; then
          echo "- [Windows 11 Setup](environment_setup/windows11_setup.md)" >> TOC.md
        fi
        echo "" >> TOC.md
        
        echo "### 🎓 Teaching Resources" >> TOC.md
        if [ -f "teaching_materials/instructor_guide.md" ]; then
          echo "- [Instructor Guide](teaching_materials/instructor_guide.md)" >> TOC.md
        fi
        echo "" >> TOC.md
        
        echo "### 📦 Integration & Archives" >> TOC.md
        if [ -f "archive_integration/integration_strategy.md" ]; then
          echo "- [Integration Strategy](archive_integration/integration_strategy.md)" >> TOC.md
        fi
        if [ -f "HX-Infrastructure-Knowledge-Base/README.md" ]; then
          echo "- [HX Infrastructure Knowledge Base](HX-Infrastructure-Knowledge-Base/README.md)" >> TOC.md
        fi
        echo "" >> TOC.md
        
        echo "### 📊 Progress & Reports" >> TOC.md
        echo "- [Training Progress](PROGRESS.md) - Auto-generated progress tracking" >> TOC.md
        echo "" >> TOC.md
        
        echo "---" >> TOC.md
        echo "*Table of Contents auto-generated on $(date)*" >> TOC.md
        
        cat TOC.md
    
    - name: Update File Statistics
      run: |
        echo "📊 Updating file statistics..."
        
        # Generate statistics
        echo "# Training Program Statistics" > STATS.md
        echo "" >> STATS.md
        echo "**Generated:** $(date)" >> STATS.md
        echo "" >> STATS.md
        
        # Count files by type
        md_count=$(find . -name "*.md" -not -path "./.git/*" | wc -l)
        pdf_count=$(find . -name "*.pdf" -not -path "./.git/*" | wc -l)
        sh_count=$(find . -name "*.sh" -not -path "./.git/*" | wc -l)
        
        echo "## 📁 File Inventory" >> STATS.md
        echo "- **Markdown Files:** $md_count" >> STATS.md
        echo "- **PDF Files:** $pdf_count" >> STATS.md
        echo "- **Scripts:** $sh_count" >> STATS.md
        echo "" >> STATS.md
        
        # Directory structure
        echo "## 📂 Directory Structure" >> STATS.md
        echo '```' >> STATS.md
        tree -I '.git' || find . -type d -not -path "./.git*" | sort >> STATS.md
        echo '```' >> STATS.md
        echo "" >> STATS.md
        
        # Content analysis
        echo "## 📝 Content Analysis" >> STATS.md
        total_size=0
        
        echo "### Curriculum Files" >> STATS.md
        for file in curriculum/*.md; do
          if [ -f "$file" ]; then
            size=$(wc -c < "$file")
            lines=$(wc -l < "$file")
            total_size=$((total_size + size))
            echo "- $(basename "$file"): $lines lines, $size bytes" >> STATS.md
          fi
        done
        echo "" >> STATS.md
        
        echo "### Exercise Files" >> STATS.md
        for file in exercises/*.md; do
          if [ -f "$file" ]; then
            size=$(wc -c < "$file")
            lines=$(wc -l < "$file")
            total_size=$((total_size + size))
            echo "- $(basename "$file"): $lines lines, $size bytes" >> STATS.md
          fi
        done
        echo "" >> STATS.md
        
        # Convert bytes to human readable
        if [ $total_size -gt 1048576 ]; then
          size_mb=$((total_size / 1048576))
          echo "**Total Content Size:** ${size_mb}MB" >> STATS.md
        elif [ $total_size -gt 1024 ]; then
          size_kb=$((total_size / 1024))
          echo "**Total Content Size:** ${size_kb}KB" >> STATS.md
        else
          echo "**Total Content Size:** ${total_size} bytes" >> STATS.md
        fi
        
        cat STATS.md
    
    - name: Check for Broken Links
      run: |
        echo "🔗 Checking for broken internal links..."
        
        # Find all markdown files and check internal links
        broken_links=0
        echo "# Link Validation Report" > link_report.md
        echo "**Date:** $(date)" >> link_report.md
        echo "" >> link_report.md
        
        find . -name "*.md" -not -path "./.git/*" | while read -r file; do
          echo "Checking links in: $file"
          
          # Extract markdown links [text](path)
          grep -oE '\[([^\]]+)\]\(([^)]+)\)' "$file" | while read -r link; do
            # Extract the path part
            path=$(echo "$link" | sed 's/.*](\([^)]*\)).*/\1/')
            
            # Skip external URLs (http/https)
            if [[ $path =~ ^https?:// ]]; then
              continue
            fi
            
            # Skip anchors
            if [[ $path =~ ^# ]]; then
              continue
            fi
            
            # Check if file exists (relative to current file's directory)
            file_dir=$(dirname "$file")
            full_path="$file_dir/$path"
            
            if [ ! -f "$full_path" ] && [ ! -f "$path" ]; then
              echo "❌ Broken link in $file: $path" >> link_report.md
              broken_links=$((broken_links + 1))
            fi
          done
        done
        
        if [ $broken_links -eq 0 ]; then
          echo "✅ No broken internal links found" >> link_report.md
        else
          echo "⚠️ Found $broken_links broken internal links" >> link_report.md
        fi
        
        cat link_report.md
    
    - name: Generate Documentation Index
      run: |
        echo "📇 Generating documentation index..."
        
        # Create searchable index
        echo "# Documentation Index" > INDEX.md
        echo "" >> INDEX.md
        echo "## 🔍 Quick Search Index" >> INDEX.md
        echo "" >> INDEX.md
        
        # Index by keywords
        declare -A keywords
        keywords["foundation"]="Day 1 Foundation, Basic concepts, Getting started"
        keywords["intermediate"]="Day 2 Intermediate, Workflows, Collaboration"
        keywords["advanced"]="Day 3 Advanced, Complex projects, Automation"
        keywords["mastery"]="Day 5 Mastery, Expert techniques, Optimization"
        keywords["exercises"]="Practical exercises, Hands-on practice, Validation"
        keywords["setup"]="Environment setup, Configuration, Installation"
        keywords["teaching"]="Instructor guide, Teaching materials, Resources"
        
        for keyword in "${!keywords[@]}"; do
          echo "### $keyword" >> INDEX.md
          echo "${keywords[$keyword]}" >> INDEX.md
          
          # Find files containing this keyword
          grep -l -i "$keyword" $(find . -name "*.md" -not -path "./.git/*") 2>/dev/null | while read -r file; do
            echo "- [$file]($file)" >> INDEX.md
          done
          echo "" >> INDEX.md
        done
        
        cat INDEX.md
    
    - name: Upload Documentation Reports
      uses: actions/upload-artifact@v4
      with:
        name: documentation-reports
        path: |
          TOC.md
          STATS.md
          INDEX.md
          link_report.md
          markdown_files.txt
        retention-days: 30
    
    - name: Commit Updated Documentation
      run: |
        echo "💾 Committing updated documentation..."
        
        # Add generated files
        git add TOC.md STATS.md INDEX.md
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No documentation changes to commit"
        else
          git commit -m "docs: Update auto-generated documentation
          
          - Updated table of contents
          - Refreshed file statistics
          - Generated documentation index
          - Validated markdown files and links
          
          Auto-generated by documentation-update workflow"
          
          echo "✅ Documentation updated and committed"
        fi
